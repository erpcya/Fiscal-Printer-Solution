// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/fiscalprint.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcFiscalPrint {

  /// <summary>Holder for reflection information generated from protos/fiscalprint.proto</summary>
  public static partial class FiscalprintReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/fiscalprint.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FiscalprintReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhwcm90b3MvZmlzY2FscHJpbnQucHJvdG8SC0Zpc2NhbFByaW50IhUKE1Nl",
            "cnZlclN0YXR1c1JlcXVlc3QiLAoUUHJpbnRlclN0YXR1c1JlcXVlc3QSFAoM",
            "cHJpbnRlcl9uYW1lGAEgASgJItIBCgxTZXJ2ZXJTdGF0dXMSGwoTcmVnaXN0",
            "ZXJlZF9wcmludGVycxgBIAEoBRIXCg9hY3RpdmVfcHJpbnRlcnMYAiABKAUS",
            "GgoScmVjZWl2ZWRfZG9jdW1lbnRzGAMgASgFEhsKE3Byb2Nlc3NlZF9kb2N1",
            "bWVudHMYBCABKAUSHQoVdW5wcm9jZXNzZWRfZG9jdW1lbnRzGAUgASgFEhkK",
            "EWVycm9uZWRfZG9jdW1lbnRzGAYgASgFEhkKEXVuZmluZGVkX3ByaW50ZXJz",
            "GAcgASgFIvgBCg1QcmludGVyU3RhdHVzEhoKEnJlY2VpdmVkX2RvY3VtZW50",
            "cxgBIAEoBRIbChNwcm9jZXNzZWRfZG9jdW1lbnRzGAIgASgFEh0KFXVucHJv",
            "Y2Vzc2VkX2RvY3VtZW50cxgDIAEoBRIZChFlcnJvbmVkX2RvY3VtZW50cxgE",
            "IAEoBRI9CgxhdmFpbGFiaWxpdHkYBSABKA4yJy5GaXNjYWxQcmludC5Qcmlu",
            "dGVyU3RhdHVzLkF2YWlsYWJpbGl0eSI1CgxBdmFpbGFiaWxpdHkSCwoHVU5L",
            "Tk9XThAAEgoKBkFDVElWRRABEgwKCElOQUNUSVZFEAIiig4KCERvY3VtZW50",
            "EhQKDHByaW50ZXJfbmFtZRgBIAEoCRIRCglwb3J0X25hbWUYAiABKAkSFQoN",
            "ZG9jdW1lbnRfdXVpZBgDIAEoCRIzCgpzZXR1cF90eXBlGAQgASgOMh8uRmlz",
            "Y2FsUHJpbnQuRG9jdW1lbnQuU2V0dXBUeXBlEjkKDWRvY3VtZW50X3R5cGUY",
            "BSABKA4yIi5GaXNjYWxQcmludC5Eb2N1bWVudC5Eb2N1bWVudFR5cGUSHQoV",
            "YnVzaW5lc3NfcGFydG5lcl9uYW1lGAYgASgJEh8KF2J1c2luZXNzX3BhcnRu",
            "ZXJfdGF4X2lkGAcgASgJEhAKCGFkZHJlc3MxGAggASgJEhAKCGFkZHJlc3My",
            "GAkgASgJEhAKCGFkZHJlc3MzGAogASgJEhAKCGFkZHJlc3M0GAsgASgJEhEK",
            "CWNpdHlfbmFtZRgMIAEoCRITCgtyZWdpb25fbmFtZRgNIAEoCRIUCgxjb3Vu",
            "dHJ5X25hbWUYDiABKAkSEwoLZGVzY3JpcHRpb24YDyABKAkSFQoNZG9jdW1l",
            "bnRfbm90ZRgQIAEoCRIcChRyZXZlcnNhbF9kb2N1bWVudF9ubxgRIAEoCRIe",
            "ChZyZXZlcnNhbF9kb2N1bWVudF9kYXRlGBIgASgDEiIKGnJldmVyc2FsX2Zp",
            "c2NhbF9wcmludGVyX25vGBMgASgJEhcKD3BvX3JlZmVyZW5jZV9ubxgUIAEo",
            "CRIXCg9zb19yZWZlcmVuY2Vfbm8YFSABKAkSIgoac2FsZXNfcmVwcmVzZW50",
            "YXRpdmVfdmFsdWUYFyABKAkSIQoZc2FsZXNfcmVwcmVzZW50YXRpdmVfbmFt",
            "ZRgYIAEoCRIUCgxwYXltZW50X3Rlcm0YGSABKAkSGgoSc2FsZXNfcmVnaW9u",
            "X3ZhbHVlGBogASgJEhkKEXNhbGVzX3JlZ2lvbl9uYW1lGBsgASgJEhMKC3Rv",
            "dGFsX2xpbmVzGBwgASgBEhMKC2dyYW5kX3RvdGFsGB0gASgBEhcKD2Ftb3Vu",
            "dF9pbl93b3JkcxgeIAEoCRIaChJkb2N1bWVudF90eXBlX25hbWUYHyABKAkS",
            "GAoQZGVsaXZlcnlfYWRkcmVzcxggIAEoCRIWCg5kZWxpdmVyeV9waG9uZRgh",
            "IAEoCRIWCg53YXJlaG91c2VfbmFtZRgiIAEoCRIVCg1kb2N1bWVudF9kYXRl",
            "GCMgASgDEhMKC2RvY3VtZW50X25vGCQgASgJEh0KFWJ1c2luZXNzX3BhcnRu",
            "ZXJfZHVucxglIAEoCRIbChNwcm9kdWN0c19xdWFudGl0aWVzGCYgASgFEhAK",
            "CHBvc19uYW1lGCcgASgJEhgKEGRpc2NvdW50X3ByaW50ZWQYKCABKAgSMQoO",
            "ZG9jdW1lbnRfbGluZXMYKSADKAsyGS5GaXNjYWxQcmludC5Eb2N1bWVudExp",
            "bmUSMAoOZG9jdW1lbnRfdGF4ZXMYKiADKAsyGC5GaXNjYWxQcmludC5Eb2N1",
            "bWVudFRheBIaChJ6X3JlcG9ydF9kYXRlX2Zyb20YKyABKAMSGAoQel9yZXBv",
            "cnRfZGF0ZV90bxgsIAEoAxIcChR6X3JlcG9ydF9udW1iZXJfZnJvbRgtIAEo",
            "BRIaChJ6X3JlcG9ydF9udW1iZXJfdG8YLiABKAUSQgoWaGlzdG9yaWNfZG9j",
            "dW1lbnRfdHlwZRgvIAEoDjIiLkZpc2NhbFByaW50LkRvY3VtZW50LkRvY3Vt",
            "ZW50VHlwZRI3ChFkb2N1bWVudF9wYXltZW50cxgwIAMoCzIcLkZpc2NhbFBy",
            "aW50LkRvY3VtZW50UGF5bWVudCLSAQoMRG9jdW1lbnRUeXBlEgwKCFJFUE9S",
            "VF9YEAASDAoIUkVQT1JUX1oQARIXChNSRVBPUlRfWl9EQVRFX1JBTkdFEAIS",
            "GQoVUkVQT1JUX1pfTlVNQkVSX1JBTkdFEAMSDAoIREVUQUlMRUQQBBILCgdN",
            "T05USExZEAUSDgoKU1VNTUFSSVpFRBAGEgsKB0lOVk9JQ0UQBxIPCgtDUkVE",
            "SVRfTUVNTxAIEg4KCkRFQklUX01FTU8QCRIOCgpOT05fRklTQ0FMEAoSCQoF",
            "U0VUVVAQCyLPAQoJU2V0dXBUeXBlEg0KCUNVVF9QQVBFUhAAEg4KCkdFVF9T",
            "VEFUVVMQARIPCgtPUEVOX0RSQVdFUhACEhEKDVJFU0VUX1BSSU5URVIQAxIM",
            "CghTRVRfVElNRRAEEhMKD1JFVkVSU0VfSU5WT0lDRRAFEhcKE1JFVkVSU0Vf",
            "Q1JFRElUX01FTU8QBhIWChJSRVZFUlNFX0RFQklUX01FTU8QBxIYChRGSVJN",
            "V0FSRV9JTkZPUk1BVElPThAIEhEKDU1FTU9SWV9TVEFUVVMQCSKRAgoMRG9j",
            "dW1lbnRMaW5lEhoKEmRvY3VtZW50X2xpbmVfdXVpZBgBIAEoCRIVCg1wcm9k",
            "dWN0X3ZhbHVlGAIgASgJEhQKDHByb2R1Y3RfbmFtZRgDIAEoCRIbChNwcm9k",
            "dWN0X2Rlc2NyaXB0aW9uGAQgASgJEhgKEHByb2R1Y3RfYmFyX2NvZGUYBSAB",
            "KAkSEAoIcXVhbnRpdHkYBiABKAESGgoScHJvZHVjdF9wcmljZV9saXN0GAcg",
            "ASgBEhUKDXByb2R1Y3RfcHJpY2UYCCABKAESEAoIdGF4X3JhdGUYCSABKAES",
            "EAoIZGlzY291bnQYCiABKAESGAoQbGluZV9kZXNjcmlwdGlvbhgLIAEoCSJx",
            "CgtEb2N1bWVudFRheBIRCgl0YXhfdmFsdWUYASABKAkSEAoIdGF4X25hbWUY",
            "AiABKAkSFwoPdGF4X2Jhc2VfYW1vdW50GAMgASgBEhIKCnRheF9hbW91bnQY",
            "BCABKAESEAoIdGF4X3JhdGUYBSABKAEiwgEKD0RvY3VtZW50UGF5bWVudBIU",
            "CgxyZWZlcmVuY2Vfbm8YASABKAkSEwoLdGVuZGVyX3R5cGUYAiABKAkSGAoQ",
            "dGVuZGVyX3R5cGVfbmFtZRgDIAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRIO",
            "CgZhbW91bnQYBSABKAESGAoQY29udmVydGVkX2Ftb3VudBgGIAEoARIUCgxw",
            "YXltZW50X2RhdGUYByABKAMSFQoNY3VycmVuY3lfY29kZRgIIAEoCSJBCg5S",
            "ZXNwb25zZVN0YXR1cxIOCgZyZXN1bHQYASABKAkiHwoKU3RhdHVzVHlwZRIG",
            "CgJPSxAAEgkKBUVSUk9SEAEirQEKDFN1YnNjcmlwdGlvbhIUCgxwcmludGVy",
            "X25hbWUYASABKAkSFQoNbGlzdGVuZXJfbmFtZRgCIAEoCRITCgtkZXNjcmlw",
            "dGlvbhgDIAEoCRIsCgR0eXBlGAQgASgOMh4uRmlzY2FsUHJpbnQuU3Vic2Ny",
            "aXB0aW9uLlR5cGUiLQoEVHlwZRILCgdQUklOVEVSEAASCgoGU0VOREVSEAES",
            "DAoITElTVEVORVIQAiLFAQoPUHJpbnRlclJlc3BvbnNlEhUKDWRvY3VtZW50",
            "X3V1aWQYASABKAkSDgoGcmVzdWx0GAIgASgJEhAKCGlzX2Vycm9yGAMgASgI",
            "EhQKDHByaW50ZXJfbmFtZRgEIAEoCRIXCg9sYXN0X2ludm9pY2Vfbm8YBSAB",
            "KAkSGwoTbGFzdF9jcmVkaXRfbWVtb19ubxgGIAEoCRIZChFmaXNjYWxfcHJp",
            "bnRlcl9ubxgHIAEoCRISCgpwcmludF9kYXRlGAggASgDMsAEChJGaXNjYWxQ",
            "cmludFNlcnZpY2USSAoQc3Vic2NyaWJlUHJpbnRlchIZLkZpc2NhbFByaW50",
            "LlN1YnNjcmlwdGlvbhoVLkZpc2NhbFByaW50LkRvY3VtZW50IgAwARJOCg9z",
            "dWJzY3JpYmVTZW5kZXISGS5GaXNjYWxQcmludC5TdWJzY3JpcHRpb24aHC5G",
            "aXNjYWxQcmludC5QcmludGVyUmVzcG9uc2UiADABElAKEXN1YnNjcmliZUxp",
            "c3RlbmVyEhkuRmlzY2FsUHJpbnQuU3Vic2NyaXB0aW9uGhwuRmlzY2FsUHJp",
            "bnQuUHJpbnRlclJlc3BvbnNlIgAwARJFCg1wcmludERvY3VtZW50EhUuRmlz",
            "Y2FsUHJpbnQuRG9jdW1lbnQaGy5GaXNjYWxQcmludC5SZXNwb25zZVN0YXR1",
            "cyIAElAKEXNlbmRQcmludFJlc3BvbnNlEhwuRmlzY2FsUHJpbnQuUHJpbnRl",
            "clJlc3BvbnNlGhsuRmlzY2FsUHJpbnQuUmVzcG9uc2VTdGF0dXMiABJQCg9n",
            "ZXRTZXJ2ZXJTdGF0dXMSIC5GaXNjYWxQcmludC5TZXJ2ZXJTdGF0dXNSZXF1",
            "ZXN0GhkuRmlzY2FsUHJpbnQuU2VydmVyU3RhdHVzIgASUwoQZ2V0UHJpbnRl",
            "clN0YXR1cxIhLkZpc2NhbFByaW50LlByaW50ZXJTdGF0dXNSZXF1ZXN0Ghou",
            "RmlzY2FsUHJpbnQuUHJpbnRlclN0YXR1cyIAQjsKEm9yZy5zcGluLmdycGMu",
            "dXRpbEILRmlzY2FsUHJpbnRQAaICA0hMV6oCD0dycGNGaXNjYWxQcmludGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.ServerStatusRequest), global::GrpcFiscalPrint.ServerStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.PrinterStatusRequest), global::GrpcFiscalPrint.PrinterStatusRequest.Parser, new[]{ "PrinterName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.ServerStatus), global::GrpcFiscalPrint.ServerStatus.Parser, new[]{ "RegisteredPrinters", "ActivePrinters", "ReceivedDocuments", "ProcessedDocuments", "UnprocessedDocuments", "ErronedDocuments", "UnfindedPrinters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.PrinterStatus), global::GrpcFiscalPrint.PrinterStatus.Parser, new[]{ "ReceivedDocuments", "ProcessedDocuments", "UnprocessedDocuments", "ErronedDocuments", "Availability" }, null, new[]{ typeof(global::GrpcFiscalPrint.PrinterStatus.Types.Availability) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.Document), global::GrpcFiscalPrint.Document.Parser, new[]{ "PrinterName", "PortName", "DocumentUuid", "SetupType", "DocumentType", "BusinessPartnerName", "BusinessPartnerTaxId", "Address1", "Address2", "Address3", "Address4", "CityName", "RegionName", "CountryName", "Description", "DocumentNote", "ReversalDocumentNo", "ReversalDocumentDate", "ReversalFiscalPrinterNo", "PoReferenceNo", "SoReferenceNo", "SalesRepresentativeValue", "SalesRepresentativeName", "PaymentTerm", "SalesRegionValue", "SalesRegionName", "TotalLines", "GrandTotal", "AmountInWords", "DocumentTypeName", "DeliveryAddress", "DeliveryPhone", "WarehouseName", "DocumentDate", "DocumentNo", "BusinessPartnerDuns", "ProductsQuantities", "PosName", "DiscountPrinted", "DocumentLines", "DocumentTaxes", "ZReportDateFrom", "ZReportDateTo", "ZReportNumberFrom", "ZReportNumberTo", "HistoricDocumentType", "DocumentPayments" }, null, new[]{ typeof(global::GrpcFiscalPrint.Document.Types.DocumentType), typeof(global::GrpcFiscalPrint.Document.Types.SetupType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.DocumentLine), global::GrpcFiscalPrint.DocumentLine.Parser, new[]{ "DocumentLineUuid", "ProductValue", "ProductName", "ProductDescription", "ProductBarCode", "Quantity", "ProductPriceList", "ProductPrice", "TaxRate", "Discount", "LineDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.DocumentTax), global::GrpcFiscalPrint.DocumentTax.Parser, new[]{ "TaxValue", "TaxName", "TaxBaseAmount", "TaxAmount", "TaxRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.DocumentPayment), global::GrpcFiscalPrint.DocumentPayment.Parser, new[]{ "ReferenceNo", "TenderType", "TenderTypeName", "Description", "Amount", "ConvertedAmount", "PaymentDate", "CurrencyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.ResponseStatus), global::GrpcFiscalPrint.ResponseStatus.Parser, new[]{ "Result" }, null, new[]{ typeof(global::GrpcFiscalPrint.ResponseStatus.Types.StatusType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.Subscription), global::GrpcFiscalPrint.Subscription.Parser, new[]{ "PrinterName", "ListenerName", "Description", "Type" }, null, new[]{ typeof(global::GrpcFiscalPrint.Subscription.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcFiscalPrint.PrinterResponse), global::GrpcFiscalPrint.PrinterResponse.Parser, new[]{ "DocumentUuid", "Result", "IsError", "PrinterName", "LastInvoiceNo", "LastCreditMemoNo", "FiscalPrinterNo", "PrintDate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request for status
  /// </summary>
  public sealed partial class ServerStatusRequest : pb::IMessage<ServerStatusRequest> {
    private static readonly pb::MessageParser<ServerStatusRequest> _parser = new pb::MessageParser<ServerStatusRequest>(() => new ServerStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusRequest(ServerStatusRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusRequest Clone() {
      return new ServerStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerStatusRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Request for printer status
  /// </summary>
  public sealed partial class PrinterStatusRequest : pb::IMessage<PrinterStatusRequest> {
    private static readonly pb::MessageParser<PrinterStatusRequest> _parser = new pb::MessageParser<PrinterStatusRequest>(() => new PrinterStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrinterStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterStatusRequest(PrinterStatusRequest other) : this() {
      printerName_ = other.printerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterStatusRequest Clone() {
      return new PrinterStatusRequest(this);
    }

    /// <summary>Field number for the "printer_name" field.</summary>
    public const int PrinterNameFieldNumber = 1;
    private string printerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrinterName {
      get { return printerName_; }
      set {
        printerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrinterStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrinterStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrinterName != other.PrinterName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrinterName.Length != 0) hash ^= PrinterName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrinterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PrinterName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrinterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrinterName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrinterStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.PrinterName.Length != 0) {
        PrinterName = other.PrinterName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PrinterName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server Status
  /// </summary>
  public sealed partial class ServerStatus : pb::IMessage<ServerStatus> {
    private static readonly pb::MessageParser<ServerStatus> _parser = new pb::MessageParser<ServerStatus>(() => new ServerStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatus(ServerStatus other) : this() {
      registeredPrinters_ = other.registeredPrinters_;
      activePrinters_ = other.activePrinters_;
      receivedDocuments_ = other.receivedDocuments_;
      processedDocuments_ = other.processedDocuments_;
      unprocessedDocuments_ = other.unprocessedDocuments_;
      erronedDocuments_ = other.erronedDocuments_;
      unfindedPrinters_ = other.unfindedPrinters_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatus Clone() {
      return new ServerStatus(this);
    }

    /// <summary>Field number for the "registered_printers" field.</summary>
    public const int RegisteredPrintersFieldNumber = 1;
    private int registeredPrinters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegisteredPrinters {
      get { return registeredPrinters_; }
      set {
        registeredPrinters_ = value;
      }
    }

    /// <summary>Field number for the "active_printers" field.</summary>
    public const int ActivePrintersFieldNumber = 2;
    private int activePrinters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivePrinters {
      get { return activePrinters_; }
      set {
        activePrinters_ = value;
      }
    }

    /// <summary>Field number for the "received_documents" field.</summary>
    public const int ReceivedDocumentsFieldNumber = 3;
    private int receivedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceivedDocuments {
      get { return receivedDocuments_; }
      set {
        receivedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "processed_documents" field.</summary>
    public const int ProcessedDocumentsFieldNumber = 4;
    private int processedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessedDocuments {
      get { return processedDocuments_; }
      set {
        processedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "unprocessed_documents" field.</summary>
    public const int UnprocessedDocumentsFieldNumber = 5;
    private int unprocessedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnprocessedDocuments {
      get { return unprocessedDocuments_; }
      set {
        unprocessedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "erroned_documents" field.</summary>
    public const int ErronedDocumentsFieldNumber = 6;
    private int erronedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErronedDocuments {
      get { return erronedDocuments_; }
      set {
        erronedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "unfinded_printers" field.</summary>
    public const int UnfindedPrintersFieldNumber = 7;
    private int unfindedPrinters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnfindedPrinters {
      get { return unfindedPrinters_; }
      set {
        unfindedPrinters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegisteredPrinters != other.RegisteredPrinters) return false;
      if (ActivePrinters != other.ActivePrinters) return false;
      if (ReceivedDocuments != other.ReceivedDocuments) return false;
      if (ProcessedDocuments != other.ProcessedDocuments) return false;
      if (UnprocessedDocuments != other.UnprocessedDocuments) return false;
      if (ErronedDocuments != other.ErronedDocuments) return false;
      if (UnfindedPrinters != other.UnfindedPrinters) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegisteredPrinters != 0) hash ^= RegisteredPrinters.GetHashCode();
      if (ActivePrinters != 0) hash ^= ActivePrinters.GetHashCode();
      if (ReceivedDocuments != 0) hash ^= ReceivedDocuments.GetHashCode();
      if (ProcessedDocuments != 0) hash ^= ProcessedDocuments.GetHashCode();
      if (UnprocessedDocuments != 0) hash ^= UnprocessedDocuments.GetHashCode();
      if (ErronedDocuments != 0) hash ^= ErronedDocuments.GetHashCode();
      if (UnfindedPrinters != 0) hash ^= UnfindedPrinters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegisteredPrinters != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RegisteredPrinters);
      }
      if (ActivePrinters != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivePrinters);
      }
      if (ReceivedDocuments != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReceivedDocuments);
      }
      if (ProcessedDocuments != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ProcessedDocuments);
      }
      if (UnprocessedDocuments != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnprocessedDocuments);
      }
      if (ErronedDocuments != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ErronedDocuments);
      }
      if (UnfindedPrinters != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnfindedPrinters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegisteredPrinters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegisteredPrinters);
      }
      if (ActivePrinters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivePrinters);
      }
      if (ReceivedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedDocuments);
      }
      if (ProcessedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessedDocuments);
      }
      if (UnprocessedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnprocessedDocuments);
      }
      if (ErronedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErronedDocuments);
      }
      if (UnfindedPrinters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnfindedPrinters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerStatus other) {
      if (other == null) {
        return;
      }
      if (other.RegisteredPrinters != 0) {
        RegisteredPrinters = other.RegisteredPrinters;
      }
      if (other.ActivePrinters != 0) {
        ActivePrinters = other.ActivePrinters;
      }
      if (other.ReceivedDocuments != 0) {
        ReceivedDocuments = other.ReceivedDocuments;
      }
      if (other.ProcessedDocuments != 0) {
        ProcessedDocuments = other.ProcessedDocuments;
      }
      if (other.UnprocessedDocuments != 0) {
        UnprocessedDocuments = other.UnprocessedDocuments;
      }
      if (other.ErronedDocuments != 0) {
        ErronedDocuments = other.ErronedDocuments;
      }
      if (other.UnfindedPrinters != 0) {
        UnfindedPrinters = other.UnfindedPrinters;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RegisteredPrinters = input.ReadInt32();
            break;
          }
          case 16: {
            ActivePrinters = input.ReadInt32();
            break;
          }
          case 24: {
            ReceivedDocuments = input.ReadInt32();
            break;
          }
          case 32: {
            ProcessedDocuments = input.ReadInt32();
            break;
          }
          case 40: {
            UnprocessedDocuments = input.ReadInt32();
            break;
          }
          case 48: {
            ErronedDocuments = input.ReadInt32();
            break;
          }
          case 56: {
            UnfindedPrinters = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server Status
  /// </summary>
  public sealed partial class PrinterStatus : pb::IMessage<PrinterStatus> {
    private static readonly pb::MessageParser<PrinterStatus> _parser = new pb::MessageParser<PrinterStatus>(() => new PrinterStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrinterStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterStatus(PrinterStatus other) : this() {
      receivedDocuments_ = other.receivedDocuments_;
      processedDocuments_ = other.processedDocuments_;
      unprocessedDocuments_ = other.unprocessedDocuments_;
      erronedDocuments_ = other.erronedDocuments_;
      availability_ = other.availability_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterStatus Clone() {
      return new PrinterStatus(this);
    }

    /// <summary>Field number for the "received_documents" field.</summary>
    public const int ReceivedDocumentsFieldNumber = 1;
    private int receivedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceivedDocuments {
      get { return receivedDocuments_; }
      set {
        receivedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "processed_documents" field.</summary>
    public const int ProcessedDocumentsFieldNumber = 2;
    private int processedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessedDocuments {
      get { return processedDocuments_; }
      set {
        processedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "unprocessed_documents" field.</summary>
    public const int UnprocessedDocumentsFieldNumber = 3;
    private int unprocessedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnprocessedDocuments {
      get { return unprocessedDocuments_; }
      set {
        unprocessedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "erroned_documents" field.</summary>
    public const int ErronedDocumentsFieldNumber = 4;
    private int erronedDocuments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErronedDocuments {
      get { return erronedDocuments_; }
      set {
        erronedDocuments_ = value;
      }
    }

    /// <summary>Field number for the "availability" field.</summary>
    public const int AvailabilityFieldNumber = 5;
    private global::GrpcFiscalPrint.PrinterStatus.Types.Availability availability_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcFiscalPrint.PrinterStatus.Types.Availability Availability {
      get { return availability_; }
      set {
        availability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrinterStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrinterStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceivedDocuments != other.ReceivedDocuments) return false;
      if (ProcessedDocuments != other.ProcessedDocuments) return false;
      if (UnprocessedDocuments != other.UnprocessedDocuments) return false;
      if (ErronedDocuments != other.ErronedDocuments) return false;
      if (Availability != other.Availability) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceivedDocuments != 0) hash ^= ReceivedDocuments.GetHashCode();
      if (ProcessedDocuments != 0) hash ^= ProcessedDocuments.GetHashCode();
      if (UnprocessedDocuments != 0) hash ^= UnprocessedDocuments.GetHashCode();
      if (ErronedDocuments != 0) hash ^= ErronedDocuments.GetHashCode();
      if (Availability != 0) hash ^= Availability.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceivedDocuments != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReceivedDocuments);
      }
      if (ProcessedDocuments != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ProcessedDocuments);
      }
      if (UnprocessedDocuments != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnprocessedDocuments);
      }
      if (ErronedDocuments != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ErronedDocuments);
      }
      if (Availability != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Availability);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceivedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceivedDocuments);
      }
      if (ProcessedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessedDocuments);
      }
      if (UnprocessedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnprocessedDocuments);
      }
      if (ErronedDocuments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErronedDocuments);
      }
      if (Availability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Availability);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrinterStatus other) {
      if (other == null) {
        return;
      }
      if (other.ReceivedDocuments != 0) {
        ReceivedDocuments = other.ReceivedDocuments;
      }
      if (other.ProcessedDocuments != 0) {
        ProcessedDocuments = other.ProcessedDocuments;
      }
      if (other.UnprocessedDocuments != 0) {
        UnprocessedDocuments = other.UnprocessedDocuments;
      }
      if (other.ErronedDocuments != 0) {
        ErronedDocuments = other.ErronedDocuments;
      }
      if (other.Availability != 0) {
        Availability = other.Availability;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReceivedDocuments = input.ReadInt32();
            break;
          }
          case 16: {
            ProcessedDocuments = input.ReadInt32();
            break;
          }
          case 24: {
            UnprocessedDocuments = input.ReadInt32();
            break;
          }
          case 32: {
            ErronedDocuments = input.ReadInt32();
            break;
          }
          case 40: {
            Availability = (global::GrpcFiscalPrint.PrinterStatus.Types.Availability) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PrinterStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Availability {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("ACTIVE")] Active = 1,
        [pbr::OriginalName("INACTIVE")] Inactive = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Print Document
  /// </summary>
  public sealed partial class Document : pb::IMessage<Document> {
    private static readonly pb::MessageParser<Document> _parser = new pb::MessageParser<Document>(() => new Document());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Document> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document(Document other) : this() {
      printerName_ = other.printerName_;
      portName_ = other.portName_;
      documentUuid_ = other.documentUuid_;
      setupType_ = other.setupType_;
      documentType_ = other.documentType_;
      businessPartnerName_ = other.businessPartnerName_;
      businessPartnerTaxId_ = other.businessPartnerTaxId_;
      address1_ = other.address1_;
      address2_ = other.address2_;
      address3_ = other.address3_;
      address4_ = other.address4_;
      cityName_ = other.cityName_;
      regionName_ = other.regionName_;
      countryName_ = other.countryName_;
      description_ = other.description_;
      documentNote_ = other.documentNote_;
      reversalDocumentNo_ = other.reversalDocumentNo_;
      reversalDocumentDate_ = other.reversalDocumentDate_;
      reversalFiscalPrinterNo_ = other.reversalFiscalPrinterNo_;
      poReferenceNo_ = other.poReferenceNo_;
      soReferenceNo_ = other.soReferenceNo_;
      salesRepresentativeValue_ = other.salesRepresentativeValue_;
      salesRepresentativeName_ = other.salesRepresentativeName_;
      paymentTerm_ = other.paymentTerm_;
      salesRegionValue_ = other.salesRegionValue_;
      salesRegionName_ = other.salesRegionName_;
      totalLines_ = other.totalLines_;
      grandTotal_ = other.grandTotal_;
      amountInWords_ = other.amountInWords_;
      documentTypeName_ = other.documentTypeName_;
      deliveryAddress_ = other.deliveryAddress_;
      deliveryPhone_ = other.deliveryPhone_;
      warehouseName_ = other.warehouseName_;
      documentDate_ = other.documentDate_;
      documentNo_ = other.documentNo_;
      businessPartnerDuns_ = other.businessPartnerDuns_;
      productsQuantities_ = other.productsQuantities_;
      posName_ = other.posName_;
      discountPrinted_ = other.discountPrinted_;
      documentLines_ = other.documentLines_.Clone();
      documentTaxes_ = other.documentTaxes_.Clone();
      zReportDateFrom_ = other.zReportDateFrom_;
      zReportDateTo_ = other.zReportDateTo_;
      zReportNumberFrom_ = other.zReportNumberFrom_;
      zReportNumberTo_ = other.zReportNumberTo_;
      historicDocumentType_ = other.historicDocumentType_;
      documentPayments_ = other.documentPayments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document Clone() {
      return new Document(this);
    }

    /// <summary>Field number for the "printer_name" field.</summary>
    public const int PrinterNameFieldNumber = 1;
    private string printerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrinterName {
      get { return printerName_; }
      set {
        printerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port_name" field.</summary>
    public const int PortNameFieldNumber = 2;
    private string portName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortName {
      get { return portName_; }
      set {
        portName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "document_uuid" field.</summary>
    public const int DocumentUuidFieldNumber = 3;
    private string documentUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocumentUuid {
      get { return documentUuid_; }
      set {
        documentUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setup_type" field.</summary>
    public const int SetupTypeFieldNumber = 4;
    private global::GrpcFiscalPrint.Document.Types.SetupType setupType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcFiscalPrint.Document.Types.SetupType SetupType {
      get { return setupType_; }
      set {
        setupType_ = value;
      }
    }

    /// <summary>Field number for the "document_type" field.</summary>
    public const int DocumentTypeFieldNumber = 5;
    private global::GrpcFiscalPrint.Document.Types.DocumentType documentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcFiscalPrint.Document.Types.DocumentType DocumentType {
      get { return documentType_; }
      set {
        documentType_ = value;
      }
    }

    /// <summary>Field number for the "business_partner_name" field.</summary>
    public const int BusinessPartnerNameFieldNumber = 6;
    private string businessPartnerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessPartnerName {
      get { return businessPartnerName_; }
      set {
        businessPartnerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business_partner_tax_id" field.</summary>
    public const int BusinessPartnerTaxIdFieldNumber = 7;
    private string businessPartnerTaxId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessPartnerTaxId {
      get { return businessPartnerTaxId_; }
      set {
        businessPartnerTaxId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address1" field.</summary>
    public const int Address1FieldNumber = 8;
    private string address1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address1 {
      get { return address1_; }
      set {
        address1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address2" field.</summary>
    public const int Address2FieldNumber = 9;
    private string address2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address2 {
      get { return address2_; }
      set {
        address2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address3" field.</summary>
    public const int Address3FieldNumber = 10;
    private string address3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address3 {
      get { return address3_; }
      set {
        address3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address4" field.</summary>
    public const int Address4FieldNumber = 11;
    private string address4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address4 {
      get { return address4_; }
      set {
        address4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "city_name" field.</summary>
    public const int CityNameFieldNumber = 12;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region_name" field.</summary>
    public const int RegionNameFieldNumber = 13;
    private string regionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionName {
      get { return regionName_; }
      set {
        regionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_name" field.</summary>
    public const int CountryNameFieldNumber = 14;
    private string countryName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryName {
      get { return countryName_; }
      set {
        countryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 15;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "document_note" field.</summary>
    public const int DocumentNoteFieldNumber = 16;
    private string documentNote_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocumentNote {
      get { return documentNote_; }
      set {
        documentNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reversal_document_no" field.</summary>
    public const int ReversalDocumentNoFieldNumber = 17;
    private string reversalDocumentNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReversalDocumentNo {
      get { return reversalDocumentNo_; }
      set {
        reversalDocumentNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reversal_document_date" field.</summary>
    public const int ReversalDocumentDateFieldNumber = 18;
    private long reversalDocumentDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReversalDocumentDate {
      get { return reversalDocumentDate_; }
      set {
        reversalDocumentDate_ = value;
      }
    }

    /// <summary>Field number for the "reversal_fiscal_printer_no" field.</summary>
    public const int ReversalFiscalPrinterNoFieldNumber = 19;
    private string reversalFiscalPrinterNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReversalFiscalPrinterNo {
      get { return reversalFiscalPrinterNo_; }
      set {
        reversalFiscalPrinterNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "po_reference_no" field.</summary>
    public const int PoReferenceNoFieldNumber = 20;
    private string poReferenceNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoReferenceNo {
      get { return poReferenceNo_; }
      set {
        poReferenceNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "so_reference_no" field.</summary>
    public const int SoReferenceNoFieldNumber = 21;
    private string soReferenceNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoReferenceNo {
      get { return soReferenceNo_; }
      set {
        soReferenceNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sales_representative_value" field.</summary>
    public const int SalesRepresentativeValueFieldNumber = 23;
    private string salesRepresentativeValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SalesRepresentativeValue {
      get { return salesRepresentativeValue_; }
      set {
        salesRepresentativeValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sales_representative_name" field.</summary>
    public const int SalesRepresentativeNameFieldNumber = 24;
    private string salesRepresentativeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SalesRepresentativeName {
      get { return salesRepresentativeName_; }
      set {
        salesRepresentativeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_term" field.</summary>
    public const int PaymentTermFieldNumber = 25;
    private string paymentTerm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentTerm {
      get { return paymentTerm_; }
      set {
        paymentTerm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sales_region_value" field.</summary>
    public const int SalesRegionValueFieldNumber = 26;
    private string salesRegionValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SalesRegionValue {
      get { return salesRegionValue_; }
      set {
        salesRegionValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sales_region_name" field.</summary>
    public const int SalesRegionNameFieldNumber = 27;
    private string salesRegionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SalesRegionName {
      get { return salesRegionName_; }
      set {
        salesRegionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_lines" field.</summary>
    public const int TotalLinesFieldNumber = 28;
    private double totalLines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalLines {
      get { return totalLines_; }
      set {
        totalLines_ = value;
      }
    }

    /// <summary>Field number for the "grand_total" field.</summary>
    public const int GrandTotalFieldNumber = 29;
    private double grandTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GrandTotal {
      get { return grandTotal_; }
      set {
        grandTotal_ = value;
      }
    }

    /// <summary>Field number for the "amount_in_words" field.</summary>
    public const int AmountInWordsFieldNumber = 30;
    private string amountInWords_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AmountInWords {
      get { return amountInWords_; }
      set {
        amountInWords_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "document_type_name" field.</summary>
    public const int DocumentTypeNameFieldNumber = 31;
    private string documentTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocumentTypeName {
      get { return documentTypeName_; }
      set {
        documentTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delivery_address" field.</summary>
    public const int DeliveryAddressFieldNumber = 32;
    private string deliveryAddress_ = "";
    /// <summary>
    ///	Delivery Dates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeliveryAddress {
      get { return deliveryAddress_; }
      set {
        deliveryAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delivery_phone" field.</summary>
    public const int DeliveryPhoneFieldNumber = 33;
    private string deliveryPhone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeliveryPhone {
      get { return deliveryPhone_; }
      set {
        deliveryPhone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "warehouse_name" field.</summary>
    public const int WarehouseNameFieldNumber = 34;
    private string warehouseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WarehouseName {
      get { return warehouseName_; }
      set {
        warehouseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "document_date" field.</summary>
    public const int DocumentDateFieldNumber = 35;
    private long documentDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DocumentDate {
      get { return documentDate_; }
      set {
        documentDate_ = value;
      }
    }

    /// <summary>Field number for the "document_no" field.</summary>
    public const int DocumentNoFieldNumber = 36;
    private string documentNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocumentNo {
      get { return documentNo_; }
      set {
        documentNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business_partner_duns" field.</summary>
    public const int BusinessPartnerDunsFieldNumber = 37;
    private string businessPartnerDuns_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessPartnerDuns {
      get { return businessPartnerDuns_; }
      set {
        businessPartnerDuns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "products_quantities" field.</summary>
    public const int ProductsQuantitiesFieldNumber = 38;
    private int productsQuantities_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProductsQuantities {
      get { return productsQuantities_; }
      set {
        productsQuantities_ = value;
      }
    }

    /// <summary>Field number for the "pos_name" field.</summary>
    public const int PosNameFieldNumber = 39;
    private string posName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PosName {
      get { return posName_; }
      set {
        posName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discount_printed" field.</summary>
    public const int DiscountPrintedFieldNumber = 40;
    private bool discountPrinted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DiscountPrinted {
      get { return discountPrinted_; }
      set {
        discountPrinted_ = value;
      }
    }

    /// <summary>Field number for the "document_lines" field.</summary>
    public const int DocumentLinesFieldNumber = 41;
    private static readonly pb::FieldCodec<global::GrpcFiscalPrint.DocumentLine> _repeated_documentLines_codec
        = pb::FieldCodec.ForMessage(330, global::GrpcFiscalPrint.DocumentLine.Parser);
    private readonly pbc::RepeatedField<global::GrpcFiscalPrint.DocumentLine> documentLines_ = new pbc::RepeatedField<global::GrpcFiscalPrint.DocumentLine>();
    /// <summary>
    ///	Document Lines
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcFiscalPrint.DocumentLine> DocumentLines {
      get { return documentLines_; }
    }

    /// <summary>Field number for the "document_taxes" field.</summary>
    public const int DocumentTaxesFieldNumber = 42;
    private static readonly pb::FieldCodec<global::GrpcFiscalPrint.DocumentTax> _repeated_documentTaxes_codec
        = pb::FieldCodec.ForMessage(338, global::GrpcFiscalPrint.DocumentTax.Parser);
    private readonly pbc::RepeatedField<global::GrpcFiscalPrint.DocumentTax> documentTaxes_ = new pbc::RepeatedField<global::GrpcFiscalPrint.DocumentTax>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcFiscalPrint.DocumentTax> DocumentTaxes {
      get { return documentTaxes_; }
    }

    /// <summary>Field number for the "z_report_date_from" field.</summary>
    public const int ZReportDateFromFieldNumber = 43;
    private long zReportDateFrom_;
    /// <summary>
    ///	Fiscal reports
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ZReportDateFrom {
      get { return zReportDateFrom_; }
      set {
        zReportDateFrom_ = value;
      }
    }

    /// <summary>Field number for the "z_report_date_to" field.</summary>
    public const int ZReportDateToFieldNumber = 44;
    private long zReportDateTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ZReportDateTo {
      get { return zReportDateTo_; }
      set {
        zReportDateTo_ = value;
      }
    }

    /// <summary>Field number for the "z_report_number_from" field.</summary>
    public const int ZReportNumberFromFieldNumber = 45;
    private int zReportNumberFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZReportNumberFrom {
      get { return zReportNumberFrom_; }
      set {
        zReportNumberFrom_ = value;
      }
    }

    /// <summary>Field number for the "z_report_number_to" field.</summary>
    public const int ZReportNumberToFieldNumber = 46;
    private int zReportNumberTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZReportNumberTo {
      get { return zReportNumberTo_; }
      set {
        zReportNumberTo_ = value;
      }
    }

    /// <summary>Field number for the "historic_document_type" field.</summary>
    public const int HistoricDocumentTypeFieldNumber = 47;
    private global::GrpcFiscalPrint.Document.Types.DocumentType historicDocumentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcFiscalPrint.Document.Types.DocumentType HistoricDocumentType {
      get { return historicDocumentType_; }
      set {
        historicDocumentType_ = value;
      }
    }

    /// <summary>Field number for the "document_payments" field.</summary>
    public const int DocumentPaymentsFieldNumber = 48;
    private static readonly pb::FieldCodec<global::GrpcFiscalPrint.DocumentPayment> _repeated_documentPayments_codec
        = pb::FieldCodec.ForMessage(386, global::GrpcFiscalPrint.DocumentPayment.Parser);
    private readonly pbc::RepeatedField<global::GrpcFiscalPrint.DocumentPayment> documentPayments_ = new pbc::RepeatedField<global::GrpcFiscalPrint.DocumentPayment>();
    /// <summary>
    ///	Payments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcFiscalPrint.DocumentPayment> DocumentPayments {
      get { return documentPayments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Document);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Document other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrinterName != other.PrinterName) return false;
      if (PortName != other.PortName) return false;
      if (DocumentUuid != other.DocumentUuid) return false;
      if (SetupType != other.SetupType) return false;
      if (DocumentType != other.DocumentType) return false;
      if (BusinessPartnerName != other.BusinessPartnerName) return false;
      if (BusinessPartnerTaxId != other.BusinessPartnerTaxId) return false;
      if (Address1 != other.Address1) return false;
      if (Address2 != other.Address2) return false;
      if (Address3 != other.Address3) return false;
      if (Address4 != other.Address4) return false;
      if (CityName != other.CityName) return false;
      if (RegionName != other.RegionName) return false;
      if (CountryName != other.CountryName) return false;
      if (Description != other.Description) return false;
      if (DocumentNote != other.DocumentNote) return false;
      if (ReversalDocumentNo != other.ReversalDocumentNo) return false;
      if (ReversalDocumentDate != other.ReversalDocumentDate) return false;
      if (ReversalFiscalPrinterNo != other.ReversalFiscalPrinterNo) return false;
      if (PoReferenceNo != other.PoReferenceNo) return false;
      if (SoReferenceNo != other.SoReferenceNo) return false;
      if (SalesRepresentativeValue != other.SalesRepresentativeValue) return false;
      if (SalesRepresentativeName != other.SalesRepresentativeName) return false;
      if (PaymentTerm != other.PaymentTerm) return false;
      if (SalesRegionValue != other.SalesRegionValue) return false;
      if (SalesRegionName != other.SalesRegionName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalLines, other.TotalLines)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GrandTotal, other.GrandTotal)) return false;
      if (AmountInWords != other.AmountInWords) return false;
      if (DocumentTypeName != other.DocumentTypeName) return false;
      if (DeliveryAddress != other.DeliveryAddress) return false;
      if (DeliveryPhone != other.DeliveryPhone) return false;
      if (WarehouseName != other.WarehouseName) return false;
      if (DocumentDate != other.DocumentDate) return false;
      if (DocumentNo != other.DocumentNo) return false;
      if (BusinessPartnerDuns != other.BusinessPartnerDuns) return false;
      if (ProductsQuantities != other.ProductsQuantities) return false;
      if (PosName != other.PosName) return false;
      if (DiscountPrinted != other.DiscountPrinted) return false;
      if(!documentLines_.Equals(other.documentLines_)) return false;
      if(!documentTaxes_.Equals(other.documentTaxes_)) return false;
      if (ZReportDateFrom != other.ZReportDateFrom) return false;
      if (ZReportDateTo != other.ZReportDateTo) return false;
      if (ZReportNumberFrom != other.ZReportNumberFrom) return false;
      if (ZReportNumberTo != other.ZReportNumberTo) return false;
      if (HistoricDocumentType != other.HistoricDocumentType) return false;
      if(!documentPayments_.Equals(other.documentPayments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrinterName.Length != 0) hash ^= PrinterName.GetHashCode();
      if (PortName.Length != 0) hash ^= PortName.GetHashCode();
      if (DocumentUuid.Length != 0) hash ^= DocumentUuid.GetHashCode();
      if (SetupType != 0) hash ^= SetupType.GetHashCode();
      if (DocumentType != 0) hash ^= DocumentType.GetHashCode();
      if (BusinessPartnerName.Length != 0) hash ^= BusinessPartnerName.GetHashCode();
      if (BusinessPartnerTaxId.Length != 0) hash ^= BusinessPartnerTaxId.GetHashCode();
      if (Address1.Length != 0) hash ^= Address1.GetHashCode();
      if (Address2.Length != 0) hash ^= Address2.GetHashCode();
      if (Address3.Length != 0) hash ^= Address3.GetHashCode();
      if (Address4.Length != 0) hash ^= Address4.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (RegionName.Length != 0) hash ^= RegionName.GetHashCode();
      if (CountryName.Length != 0) hash ^= CountryName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (DocumentNote.Length != 0) hash ^= DocumentNote.GetHashCode();
      if (ReversalDocumentNo.Length != 0) hash ^= ReversalDocumentNo.GetHashCode();
      if (ReversalDocumentDate != 0L) hash ^= ReversalDocumentDate.GetHashCode();
      if (ReversalFiscalPrinterNo.Length != 0) hash ^= ReversalFiscalPrinterNo.GetHashCode();
      if (PoReferenceNo.Length != 0) hash ^= PoReferenceNo.GetHashCode();
      if (SoReferenceNo.Length != 0) hash ^= SoReferenceNo.GetHashCode();
      if (SalesRepresentativeValue.Length != 0) hash ^= SalesRepresentativeValue.GetHashCode();
      if (SalesRepresentativeName.Length != 0) hash ^= SalesRepresentativeName.GetHashCode();
      if (PaymentTerm.Length != 0) hash ^= PaymentTerm.GetHashCode();
      if (SalesRegionValue.Length != 0) hash ^= SalesRegionValue.GetHashCode();
      if (SalesRegionName.Length != 0) hash ^= SalesRegionName.GetHashCode();
      if (TotalLines != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalLines);
      if (GrandTotal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GrandTotal);
      if (AmountInWords.Length != 0) hash ^= AmountInWords.GetHashCode();
      if (DocumentTypeName.Length != 0) hash ^= DocumentTypeName.GetHashCode();
      if (DeliveryAddress.Length != 0) hash ^= DeliveryAddress.GetHashCode();
      if (DeliveryPhone.Length != 0) hash ^= DeliveryPhone.GetHashCode();
      if (WarehouseName.Length != 0) hash ^= WarehouseName.GetHashCode();
      if (DocumentDate != 0L) hash ^= DocumentDate.GetHashCode();
      if (DocumentNo.Length != 0) hash ^= DocumentNo.GetHashCode();
      if (BusinessPartnerDuns.Length != 0) hash ^= BusinessPartnerDuns.GetHashCode();
      if (ProductsQuantities != 0) hash ^= ProductsQuantities.GetHashCode();
      if (PosName.Length != 0) hash ^= PosName.GetHashCode();
      if (DiscountPrinted != false) hash ^= DiscountPrinted.GetHashCode();
      hash ^= documentLines_.GetHashCode();
      hash ^= documentTaxes_.GetHashCode();
      if (ZReportDateFrom != 0L) hash ^= ZReportDateFrom.GetHashCode();
      if (ZReportDateTo != 0L) hash ^= ZReportDateTo.GetHashCode();
      if (ZReportNumberFrom != 0) hash ^= ZReportNumberFrom.GetHashCode();
      if (ZReportNumberTo != 0) hash ^= ZReportNumberTo.GetHashCode();
      if (HistoricDocumentType != 0) hash ^= HistoricDocumentType.GetHashCode();
      hash ^= documentPayments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrinterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PrinterName);
      }
      if (PortName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PortName);
      }
      if (DocumentUuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DocumentUuid);
      }
      if (SetupType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SetupType);
      }
      if (DocumentType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DocumentType);
      }
      if (BusinessPartnerName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BusinessPartnerName);
      }
      if (BusinessPartnerTaxId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BusinessPartnerTaxId);
      }
      if (Address1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Address1);
      }
      if (Address2.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Address2);
      }
      if (Address3.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Address3);
      }
      if (Address4.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Address4);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CityName);
      }
      if (RegionName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RegionName);
      }
      if (CountryName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CountryName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Description);
      }
      if (DocumentNote.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(DocumentNote);
      }
      if (ReversalDocumentNo.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ReversalDocumentNo);
      }
      if (ReversalDocumentDate != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(ReversalDocumentDate);
      }
      if (ReversalFiscalPrinterNo.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ReversalFiscalPrinterNo);
      }
      if (PoReferenceNo.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PoReferenceNo);
      }
      if (SoReferenceNo.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(SoReferenceNo);
      }
      if (SalesRepresentativeValue.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SalesRepresentativeValue);
      }
      if (SalesRepresentativeName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(SalesRepresentativeName);
      }
      if (PaymentTerm.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(PaymentTerm);
      }
      if (SalesRegionValue.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(SalesRegionValue);
      }
      if (SalesRegionName.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SalesRegionName);
      }
      if (TotalLines != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(TotalLines);
      }
      if (GrandTotal != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(GrandTotal);
      }
      if (AmountInWords.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(AmountInWords);
      }
      if (DocumentTypeName.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(DocumentTypeName);
      }
      if (DeliveryAddress.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(DeliveryAddress);
      }
      if (DeliveryPhone.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(DeliveryPhone);
      }
      if (WarehouseName.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WarehouseName);
      }
      if (DocumentDate != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(DocumentDate);
      }
      if (DocumentNo.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(DocumentNo);
      }
      if (BusinessPartnerDuns.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(BusinessPartnerDuns);
      }
      if (ProductsQuantities != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(ProductsQuantities);
      }
      if (PosName.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(PosName);
      }
      if (DiscountPrinted != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(DiscountPrinted);
      }
      documentLines_.WriteTo(output, _repeated_documentLines_codec);
      documentTaxes_.WriteTo(output, _repeated_documentTaxes_codec);
      if (ZReportDateFrom != 0L) {
        output.WriteRawTag(216, 2);
        output.WriteInt64(ZReportDateFrom);
      }
      if (ZReportDateTo != 0L) {
        output.WriteRawTag(224, 2);
        output.WriteInt64(ZReportDateTo);
      }
      if (ZReportNumberFrom != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(ZReportNumberFrom);
      }
      if (ZReportNumberTo != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(ZReportNumberTo);
      }
      if (HistoricDocumentType != 0) {
        output.WriteRawTag(248, 2);
        output.WriteEnum((int) HistoricDocumentType);
      }
      documentPayments_.WriteTo(output, _repeated_documentPayments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrinterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrinterName);
      }
      if (PortName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PortName);
      }
      if (DocumentUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocumentUuid);
      }
      if (SetupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SetupType);
      }
      if (DocumentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DocumentType);
      }
      if (BusinessPartnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BusinessPartnerName);
      }
      if (BusinessPartnerTaxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BusinessPartnerTaxId);
      }
      if (Address1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address1);
      }
      if (Address2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address2);
      }
      if (Address3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address3);
      }
      if (Address4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address4);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (RegionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionName);
      }
      if (CountryName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (DocumentNote.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DocumentNote);
      }
      if (ReversalDocumentNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReversalDocumentNo);
      }
      if (ReversalDocumentDate != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ReversalDocumentDate);
      }
      if (ReversalFiscalPrinterNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReversalFiscalPrinterNo);
      }
      if (PoReferenceNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PoReferenceNo);
      }
      if (SoReferenceNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SoReferenceNo);
      }
      if (SalesRepresentativeValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SalesRepresentativeValue);
      }
      if (SalesRepresentativeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SalesRepresentativeName);
      }
      if (PaymentTerm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PaymentTerm);
      }
      if (SalesRegionValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SalesRegionValue);
      }
      if (SalesRegionName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SalesRegionName);
      }
      if (TotalLines != 0D) {
        size += 2 + 8;
      }
      if (GrandTotal != 0D) {
        size += 2 + 8;
      }
      if (AmountInWords.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AmountInWords);
      }
      if (DocumentTypeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DocumentTypeName);
      }
      if (DeliveryAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeliveryAddress);
      }
      if (DeliveryPhone.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeliveryPhone);
      }
      if (WarehouseName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WarehouseName);
      }
      if (DocumentDate != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DocumentDate);
      }
      if (DocumentNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DocumentNo);
      }
      if (BusinessPartnerDuns.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BusinessPartnerDuns);
      }
      if (ProductsQuantities != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProductsQuantities);
      }
      if (PosName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PosName);
      }
      if (DiscountPrinted != false) {
        size += 2 + 1;
      }
      size += documentLines_.CalculateSize(_repeated_documentLines_codec);
      size += documentTaxes_.CalculateSize(_repeated_documentTaxes_codec);
      if (ZReportDateFrom != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ZReportDateFrom);
      }
      if (ZReportDateTo != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ZReportDateTo);
      }
      if (ZReportNumberFrom != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ZReportNumberFrom);
      }
      if (ZReportNumberTo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ZReportNumberTo);
      }
      if (HistoricDocumentType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HistoricDocumentType);
      }
      size += documentPayments_.CalculateSize(_repeated_documentPayments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Document other) {
      if (other == null) {
        return;
      }
      if (other.PrinterName.Length != 0) {
        PrinterName = other.PrinterName;
      }
      if (other.PortName.Length != 0) {
        PortName = other.PortName;
      }
      if (other.DocumentUuid.Length != 0) {
        DocumentUuid = other.DocumentUuid;
      }
      if (other.SetupType != 0) {
        SetupType = other.SetupType;
      }
      if (other.DocumentType != 0) {
        DocumentType = other.DocumentType;
      }
      if (other.BusinessPartnerName.Length != 0) {
        BusinessPartnerName = other.BusinessPartnerName;
      }
      if (other.BusinessPartnerTaxId.Length != 0) {
        BusinessPartnerTaxId = other.BusinessPartnerTaxId;
      }
      if (other.Address1.Length != 0) {
        Address1 = other.Address1;
      }
      if (other.Address2.Length != 0) {
        Address2 = other.Address2;
      }
      if (other.Address3.Length != 0) {
        Address3 = other.Address3;
      }
      if (other.Address4.Length != 0) {
        Address4 = other.Address4;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.RegionName.Length != 0) {
        RegionName = other.RegionName;
      }
      if (other.CountryName.Length != 0) {
        CountryName = other.CountryName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.DocumentNote.Length != 0) {
        DocumentNote = other.DocumentNote;
      }
      if (other.ReversalDocumentNo.Length != 0) {
        ReversalDocumentNo = other.ReversalDocumentNo;
      }
      if (other.ReversalDocumentDate != 0L) {
        ReversalDocumentDate = other.ReversalDocumentDate;
      }
      if (other.ReversalFiscalPrinterNo.Length != 0) {
        ReversalFiscalPrinterNo = other.ReversalFiscalPrinterNo;
      }
      if (other.PoReferenceNo.Length != 0) {
        PoReferenceNo = other.PoReferenceNo;
      }
      if (other.SoReferenceNo.Length != 0) {
        SoReferenceNo = other.SoReferenceNo;
      }
      if (other.SalesRepresentativeValue.Length != 0) {
        SalesRepresentativeValue = other.SalesRepresentativeValue;
      }
      if (other.SalesRepresentativeName.Length != 0) {
        SalesRepresentativeName = other.SalesRepresentativeName;
      }
      if (other.PaymentTerm.Length != 0) {
        PaymentTerm = other.PaymentTerm;
      }
      if (other.SalesRegionValue.Length != 0) {
        SalesRegionValue = other.SalesRegionValue;
      }
      if (other.SalesRegionName.Length != 0) {
        SalesRegionName = other.SalesRegionName;
      }
      if (other.TotalLines != 0D) {
        TotalLines = other.TotalLines;
      }
      if (other.GrandTotal != 0D) {
        GrandTotal = other.GrandTotal;
      }
      if (other.AmountInWords.Length != 0) {
        AmountInWords = other.AmountInWords;
      }
      if (other.DocumentTypeName.Length != 0) {
        DocumentTypeName = other.DocumentTypeName;
      }
      if (other.DeliveryAddress.Length != 0) {
        DeliveryAddress = other.DeliveryAddress;
      }
      if (other.DeliveryPhone.Length != 0) {
        DeliveryPhone = other.DeliveryPhone;
      }
      if (other.WarehouseName.Length != 0) {
        WarehouseName = other.WarehouseName;
      }
      if (other.DocumentDate != 0L) {
        DocumentDate = other.DocumentDate;
      }
      if (other.DocumentNo.Length != 0) {
        DocumentNo = other.DocumentNo;
      }
      if (other.BusinessPartnerDuns.Length != 0) {
        BusinessPartnerDuns = other.BusinessPartnerDuns;
      }
      if (other.ProductsQuantities != 0) {
        ProductsQuantities = other.ProductsQuantities;
      }
      if (other.PosName.Length != 0) {
        PosName = other.PosName;
      }
      if (other.DiscountPrinted != false) {
        DiscountPrinted = other.DiscountPrinted;
      }
      documentLines_.Add(other.documentLines_);
      documentTaxes_.Add(other.documentTaxes_);
      if (other.ZReportDateFrom != 0L) {
        ZReportDateFrom = other.ZReportDateFrom;
      }
      if (other.ZReportDateTo != 0L) {
        ZReportDateTo = other.ZReportDateTo;
      }
      if (other.ZReportNumberFrom != 0) {
        ZReportNumberFrom = other.ZReportNumberFrom;
      }
      if (other.ZReportNumberTo != 0) {
        ZReportNumberTo = other.ZReportNumberTo;
      }
      if (other.HistoricDocumentType != 0) {
        HistoricDocumentType = other.HistoricDocumentType;
      }
      documentPayments_.Add(other.documentPayments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PrinterName = input.ReadString();
            break;
          }
          case 18: {
            PortName = input.ReadString();
            break;
          }
          case 26: {
            DocumentUuid = input.ReadString();
            break;
          }
          case 32: {
            SetupType = (global::GrpcFiscalPrint.Document.Types.SetupType) input.ReadEnum();
            break;
          }
          case 40: {
            DocumentType = (global::GrpcFiscalPrint.Document.Types.DocumentType) input.ReadEnum();
            break;
          }
          case 50: {
            BusinessPartnerName = input.ReadString();
            break;
          }
          case 58: {
            BusinessPartnerTaxId = input.ReadString();
            break;
          }
          case 66: {
            Address1 = input.ReadString();
            break;
          }
          case 74: {
            Address2 = input.ReadString();
            break;
          }
          case 82: {
            Address3 = input.ReadString();
            break;
          }
          case 90: {
            Address4 = input.ReadString();
            break;
          }
          case 98: {
            CityName = input.ReadString();
            break;
          }
          case 106: {
            RegionName = input.ReadString();
            break;
          }
          case 114: {
            CountryName = input.ReadString();
            break;
          }
          case 122: {
            Description = input.ReadString();
            break;
          }
          case 130: {
            DocumentNote = input.ReadString();
            break;
          }
          case 138: {
            ReversalDocumentNo = input.ReadString();
            break;
          }
          case 144: {
            ReversalDocumentDate = input.ReadInt64();
            break;
          }
          case 154: {
            ReversalFiscalPrinterNo = input.ReadString();
            break;
          }
          case 162: {
            PoReferenceNo = input.ReadString();
            break;
          }
          case 170: {
            SoReferenceNo = input.ReadString();
            break;
          }
          case 186: {
            SalesRepresentativeValue = input.ReadString();
            break;
          }
          case 194: {
            SalesRepresentativeName = input.ReadString();
            break;
          }
          case 202: {
            PaymentTerm = input.ReadString();
            break;
          }
          case 210: {
            SalesRegionValue = input.ReadString();
            break;
          }
          case 218: {
            SalesRegionName = input.ReadString();
            break;
          }
          case 225: {
            TotalLines = input.ReadDouble();
            break;
          }
          case 233: {
            GrandTotal = input.ReadDouble();
            break;
          }
          case 242: {
            AmountInWords = input.ReadString();
            break;
          }
          case 250: {
            DocumentTypeName = input.ReadString();
            break;
          }
          case 258: {
            DeliveryAddress = input.ReadString();
            break;
          }
          case 266: {
            DeliveryPhone = input.ReadString();
            break;
          }
          case 274: {
            WarehouseName = input.ReadString();
            break;
          }
          case 280: {
            DocumentDate = input.ReadInt64();
            break;
          }
          case 290: {
            DocumentNo = input.ReadString();
            break;
          }
          case 298: {
            BusinessPartnerDuns = input.ReadString();
            break;
          }
          case 304: {
            ProductsQuantities = input.ReadInt32();
            break;
          }
          case 314: {
            PosName = input.ReadString();
            break;
          }
          case 320: {
            DiscountPrinted = input.ReadBool();
            break;
          }
          case 330: {
            documentLines_.AddEntriesFrom(input, _repeated_documentLines_codec);
            break;
          }
          case 338: {
            documentTaxes_.AddEntriesFrom(input, _repeated_documentTaxes_codec);
            break;
          }
          case 344: {
            ZReportDateFrom = input.ReadInt64();
            break;
          }
          case 352: {
            ZReportDateTo = input.ReadInt64();
            break;
          }
          case 360: {
            ZReportNumberFrom = input.ReadInt32();
            break;
          }
          case 368: {
            ZReportNumberTo = input.ReadInt32();
            break;
          }
          case 376: {
            HistoricDocumentType = (global::GrpcFiscalPrint.Document.Types.DocumentType) input.ReadEnum();
            break;
          }
          case 386: {
            documentPayments_.AddEntriesFrom(input, _repeated_documentPayments_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Document message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DocumentType {
        [pbr::OriginalName("REPORT_X")] ReportX = 0,
        [pbr::OriginalName("REPORT_Z")] ReportZ = 1,
        [pbr::OriginalName("REPORT_Z_DATE_RANGE")] ReportZDateRange = 2,
        [pbr::OriginalName("REPORT_Z_NUMBER_RANGE")] ReportZNumberRange = 3,
        [pbr::OriginalName("DETAILED")] Detailed = 4,
        [pbr::OriginalName("MONTHLY")] Monthly = 5,
        [pbr::OriginalName("SUMMARIZED")] Summarized = 6,
        [pbr::OriginalName("INVOICE")] Invoice = 7,
        [pbr::OriginalName("CREDIT_MEMO")] CreditMemo = 8,
        [pbr::OriginalName("DEBIT_MEMO")] DebitMemo = 9,
        [pbr::OriginalName("NON_FISCAL")] NonFiscal = 10,
        [pbr::OriginalName("SETUP")] Setup = 11,
      }

      public enum SetupType {
        [pbr::OriginalName("CUT_PAPER")] CutPaper = 0,
        [pbr::OriginalName("GET_STATUS")] GetStatus = 1,
        [pbr::OriginalName("OPEN_DRAWER")] OpenDrawer = 2,
        [pbr::OriginalName("RESET_PRINTER")] ResetPrinter = 3,
        [pbr::OriginalName("SET_TIME")] SetTime = 4,
        [pbr::OriginalName("REVERSE_INVOICE")] ReverseInvoice = 5,
        [pbr::OriginalName("REVERSE_CREDIT_MEMO")] ReverseCreditMemo = 6,
        [pbr::OriginalName("REVERSE_DEBIT_MEMO")] ReverseDebitMemo = 7,
        [pbr::OriginalName("FIRMWARE_INFORMATION")] FirmwareInformation = 8,
        [pbr::OriginalName("MEMORY_STATUS")] MemoryStatus = 9,
      }

    }
    #endregion

  }

  /// <summary>
  /// Print Document Line
  /// </summary>
  public sealed partial class DocumentLine : pb::IMessage<DocumentLine> {
    private static readonly pb::MessageParser<DocumentLine> _parser = new pb::MessageParser<DocumentLine>(() => new DocumentLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentLine(DocumentLine other) : this() {
      documentLineUuid_ = other.documentLineUuid_;
      productValue_ = other.productValue_;
      productName_ = other.productName_;
      productDescription_ = other.productDescription_;
      productBarCode_ = other.productBarCode_;
      quantity_ = other.quantity_;
      productPriceList_ = other.productPriceList_;
      productPrice_ = other.productPrice_;
      taxRate_ = other.taxRate_;
      discount_ = other.discount_;
      lineDescription_ = other.lineDescription_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentLine Clone() {
      return new DocumentLine(this);
    }

    /// <summary>Field number for the "document_line_uuid" field.</summary>
    public const int DocumentLineUuidFieldNumber = 1;
    private string documentLineUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocumentLineUuid {
      get { return documentLineUuid_; }
      set {
        documentLineUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_value" field.</summary>
    public const int ProductValueFieldNumber = 2;
    private string productValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductValue {
      get { return productValue_; }
      set {
        productValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_name" field.</summary>
    public const int ProductNameFieldNumber = 3;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_description" field.</summary>
    public const int ProductDescriptionFieldNumber = 4;
    private string productDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductDescription {
      get { return productDescription_; }
      set {
        productDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_bar_code" field.</summary>
    public const int ProductBarCodeFieldNumber = 5;
    private string productBarCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductBarCode {
      get { return productBarCode_; }
      set {
        productBarCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 6;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "product_price_list" field.</summary>
    public const int ProductPriceListFieldNumber = 7;
    private double productPriceList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ProductPriceList {
      get { return productPriceList_; }
      set {
        productPriceList_ = value;
      }
    }

    /// <summary>Field number for the "product_price" field.</summary>
    public const int ProductPriceFieldNumber = 8;
    private double productPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ProductPrice {
      get { return productPrice_; }
      set {
        productPrice_ = value;
      }
    }

    /// <summary>Field number for the "tax_rate" field.</summary>
    public const int TaxRateFieldNumber = 9;
    private double taxRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TaxRate {
      get { return taxRate_; }
      set {
        taxRate_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 10;
    private double discount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    /// <summary>Field number for the "line_description" field.</summary>
    public const int LineDescriptionFieldNumber = 11;
    private string lineDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LineDescription {
      get { return lineDescription_; }
      set {
        lineDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocumentLineUuid != other.DocumentLineUuid) return false;
      if (ProductValue != other.ProductValue) return false;
      if (ProductName != other.ProductName) return false;
      if (ProductDescription != other.ProductDescription) return false;
      if (ProductBarCode != other.ProductBarCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProductPriceList, other.ProductPriceList)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProductPrice, other.ProductPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TaxRate, other.TaxRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Discount, other.Discount)) return false;
      if (LineDescription != other.LineDescription) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocumentLineUuid.Length != 0) hash ^= DocumentLineUuid.GetHashCode();
      if (ProductValue.Length != 0) hash ^= ProductValue.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (ProductDescription.Length != 0) hash ^= ProductDescription.GetHashCode();
      if (ProductBarCode.Length != 0) hash ^= ProductBarCode.GetHashCode();
      if (Quantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity);
      if (ProductPriceList != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProductPriceList);
      if (ProductPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProductPrice);
      if (TaxRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TaxRate);
      if (Discount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Discount);
      if (LineDescription.Length != 0) hash ^= LineDescription.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocumentLineUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocumentLineUuid);
      }
      if (ProductValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductValue);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductName);
      }
      if (ProductDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProductDescription);
      }
      if (ProductBarCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProductBarCode);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Quantity);
      }
      if (ProductPriceList != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ProductPriceList);
      }
      if (ProductPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ProductPrice);
      }
      if (TaxRate != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TaxRate);
      }
      if (Discount != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Discount);
      }
      if (LineDescription.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LineDescription);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocumentLineUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocumentLineUuid);
      }
      if (ProductValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductValue);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (ProductDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductDescription);
      }
      if (ProductBarCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductBarCode);
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (ProductPriceList != 0D) {
        size += 1 + 8;
      }
      if (ProductPrice != 0D) {
        size += 1 + 8;
      }
      if (TaxRate != 0D) {
        size += 1 + 8;
      }
      if (Discount != 0D) {
        size += 1 + 8;
      }
      if (LineDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LineDescription);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentLine other) {
      if (other == null) {
        return;
      }
      if (other.DocumentLineUuid.Length != 0) {
        DocumentLineUuid = other.DocumentLineUuid;
      }
      if (other.ProductValue.Length != 0) {
        ProductValue = other.ProductValue;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.ProductDescription.Length != 0) {
        ProductDescription = other.ProductDescription;
      }
      if (other.ProductBarCode.Length != 0) {
        ProductBarCode = other.ProductBarCode;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.ProductPriceList != 0D) {
        ProductPriceList = other.ProductPriceList;
      }
      if (other.ProductPrice != 0D) {
        ProductPrice = other.ProductPrice;
      }
      if (other.TaxRate != 0D) {
        TaxRate = other.TaxRate;
      }
      if (other.Discount != 0D) {
        Discount = other.Discount;
      }
      if (other.LineDescription.Length != 0) {
        LineDescription = other.LineDescription;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DocumentLineUuid = input.ReadString();
            break;
          }
          case 18: {
            ProductValue = input.ReadString();
            break;
          }
          case 26: {
            ProductName = input.ReadString();
            break;
          }
          case 34: {
            ProductDescription = input.ReadString();
            break;
          }
          case 42: {
            ProductBarCode = input.ReadString();
            break;
          }
          case 49: {
            Quantity = input.ReadDouble();
            break;
          }
          case 57: {
            ProductPriceList = input.ReadDouble();
            break;
          }
          case 65: {
            ProductPrice = input.ReadDouble();
            break;
          }
          case 73: {
            TaxRate = input.ReadDouble();
            break;
          }
          case 81: {
            Discount = input.ReadDouble();
            break;
          }
          case 90: {
            LineDescription = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Print Document Taxes
  /// </summary>
  public sealed partial class DocumentTax : pb::IMessage<DocumentTax> {
    private static readonly pb::MessageParser<DocumentTax> _parser = new pb::MessageParser<DocumentTax>(() => new DocumentTax());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentTax> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentTax() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentTax(DocumentTax other) : this() {
      taxValue_ = other.taxValue_;
      taxName_ = other.taxName_;
      taxBaseAmount_ = other.taxBaseAmount_;
      taxAmount_ = other.taxAmount_;
      taxRate_ = other.taxRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentTax Clone() {
      return new DocumentTax(this);
    }

    /// <summary>Field number for the "tax_value" field.</summary>
    public const int TaxValueFieldNumber = 1;
    private string taxValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaxValue {
      get { return taxValue_; }
      set {
        taxValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tax_name" field.</summary>
    public const int TaxNameFieldNumber = 2;
    private string taxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaxName {
      get { return taxName_; }
      set {
        taxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tax_base_amount" field.</summary>
    public const int TaxBaseAmountFieldNumber = 3;
    private double taxBaseAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TaxBaseAmount {
      get { return taxBaseAmount_; }
      set {
        taxBaseAmount_ = value;
      }
    }

    /// <summary>Field number for the "tax_amount" field.</summary>
    public const int TaxAmountFieldNumber = 4;
    private double taxAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TaxAmount {
      get { return taxAmount_; }
      set {
        taxAmount_ = value;
      }
    }

    /// <summary>Field number for the "tax_rate" field.</summary>
    public const int TaxRateFieldNumber = 5;
    private double taxRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TaxRate {
      get { return taxRate_; }
      set {
        taxRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentTax);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentTax other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaxValue != other.TaxValue) return false;
      if (TaxName != other.TaxName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TaxBaseAmount, other.TaxBaseAmount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TaxAmount, other.TaxAmount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TaxRate, other.TaxRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaxValue.Length != 0) hash ^= TaxValue.GetHashCode();
      if (TaxName.Length != 0) hash ^= TaxName.GetHashCode();
      if (TaxBaseAmount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TaxBaseAmount);
      if (TaxAmount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TaxAmount);
      if (TaxRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TaxRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaxValue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaxValue);
      }
      if (TaxName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaxName);
      }
      if (TaxBaseAmount != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TaxBaseAmount);
      }
      if (TaxAmount != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TaxAmount);
      }
      if (TaxRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(TaxRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaxValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaxValue);
      }
      if (TaxName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaxName);
      }
      if (TaxBaseAmount != 0D) {
        size += 1 + 8;
      }
      if (TaxAmount != 0D) {
        size += 1 + 8;
      }
      if (TaxRate != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentTax other) {
      if (other == null) {
        return;
      }
      if (other.TaxValue.Length != 0) {
        TaxValue = other.TaxValue;
      }
      if (other.TaxName.Length != 0) {
        TaxName = other.TaxName;
      }
      if (other.TaxBaseAmount != 0D) {
        TaxBaseAmount = other.TaxBaseAmount;
      }
      if (other.TaxAmount != 0D) {
        TaxAmount = other.TaxAmount;
      }
      if (other.TaxRate != 0D) {
        TaxRate = other.TaxRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaxValue = input.ReadString();
            break;
          }
          case 18: {
            TaxName = input.ReadString();
            break;
          }
          case 25: {
            TaxBaseAmount = input.ReadDouble();
            break;
          }
          case 33: {
            TaxAmount = input.ReadDouble();
            break;
          }
          case 41: {
            TaxRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	Payment detail for request
  /// </summary>
  public sealed partial class DocumentPayment : pb::IMessage<DocumentPayment> {
    private static readonly pb::MessageParser<DocumentPayment> _parser = new pb::MessageParser<DocumentPayment>(() => new DocumentPayment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentPayment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentPayment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentPayment(DocumentPayment other) : this() {
      referenceNo_ = other.referenceNo_;
      tenderType_ = other.tenderType_;
      tenderTypeName_ = other.tenderTypeName_;
      description_ = other.description_;
      amount_ = other.amount_;
      convertedAmount_ = other.convertedAmount_;
      paymentDate_ = other.paymentDate_;
      currencyCode_ = other.currencyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentPayment Clone() {
      return new DocumentPayment(this);
    }

    /// <summary>Field number for the "reference_no" field.</summary>
    public const int ReferenceNoFieldNumber = 1;
    private string referenceNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceNo {
      get { return referenceNo_; }
      set {
        referenceNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tender_type" field.</summary>
    public const int TenderTypeFieldNumber = 2;
    private string tenderType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TenderType {
      get { return tenderType_; }
      set {
        tenderType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tender_type_name" field.</summary>
    public const int TenderTypeNameFieldNumber = 3;
    private string tenderTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TenderTypeName {
      get { return tenderTypeName_; }
      set {
        tenderTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "converted_amount" field.</summary>
    public const int ConvertedAmountFieldNumber = 6;
    private double convertedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConvertedAmount {
      get { return convertedAmount_; }
      set {
        convertedAmount_ = value;
      }
    }

    /// <summary>Field number for the "payment_date" field.</summary>
    public const int PaymentDateFieldNumber = 7;
    private long paymentDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PaymentDate {
      get { return paymentDate_; }
      set {
        paymentDate_ = value;
      }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 8;
    private string currencyCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentPayment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentPayment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReferenceNo != other.ReferenceNo) return false;
      if (TenderType != other.TenderType) return false;
      if (TenderTypeName != other.TenderTypeName) return false;
      if (Description != other.Description) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConvertedAmount, other.ConvertedAmount)) return false;
      if (PaymentDate != other.PaymentDate) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReferenceNo.Length != 0) hash ^= ReferenceNo.GetHashCode();
      if (TenderType.Length != 0) hash ^= TenderType.GetHashCode();
      if (TenderTypeName.Length != 0) hash ^= TenderTypeName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Amount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
      if (ConvertedAmount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConvertedAmount);
      if (PaymentDate != 0L) hash ^= PaymentDate.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReferenceNo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReferenceNo);
      }
      if (TenderType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TenderType);
      }
      if (TenderTypeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TenderTypeName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Amount != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Amount);
      }
      if (ConvertedAmount != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ConvertedAmount);
      }
      if (PaymentDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(PaymentDate);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrencyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReferenceNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceNo);
      }
      if (TenderType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TenderType);
      }
      if (TenderTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TenderTypeName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (ConvertedAmount != 0D) {
        size += 1 + 8;
      }
      if (PaymentDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PaymentDate);
      }
      if (CurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentPayment other) {
      if (other == null) {
        return;
      }
      if (other.ReferenceNo.Length != 0) {
        ReferenceNo = other.ReferenceNo;
      }
      if (other.TenderType.Length != 0) {
        TenderType = other.TenderType;
      }
      if (other.TenderTypeName.Length != 0) {
        TenderTypeName = other.TenderTypeName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.ConvertedAmount != 0D) {
        ConvertedAmount = other.ConvertedAmount;
      }
      if (other.PaymentDate != 0L) {
        PaymentDate = other.PaymentDate;
      }
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReferenceNo = input.ReadString();
            break;
          }
          case 18: {
            TenderType = input.ReadString();
            break;
          }
          case 26: {
            TenderTypeName = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 41: {
            Amount = input.ReadDouble();
            break;
          }
          case 49: {
            ConvertedAmount = input.ReadDouble();
            break;
          }
          case 56: {
            PaymentDate = input.ReadInt64();
            break;
          }
          case 66: {
            CurrencyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server Status
  /// </summary>
  public sealed partial class ResponseStatus : pb::IMessage<ResponseStatus> {
    private static readonly pb::MessageParser<ResponseStatus> _parser = new pb::MessageParser<ResponseStatus>(() => new ResponseStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseStatus(ResponseStatus other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseStatus Clone() {
      return new ResponseStatus(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseStatus other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ResponseStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusType {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("ERROR")] Error = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Subscribe
  /// </summary>
  public sealed partial class Subscription : pb::IMessage<Subscription> {
    private static readonly pb::MessageParser<Subscription> _parser = new pb::MessageParser<Subscription>(() => new Subscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription(Subscription other) : this() {
      printerName_ = other.printerName_;
      listenerName_ = other.listenerName_;
      description_ = other.description_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription Clone() {
      return new Subscription(this);
    }

    /// <summary>Field number for the "printer_name" field.</summary>
    public const int PrinterNameFieldNumber = 1;
    private string printerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrinterName {
      get { return printerName_; }
      set {
        printerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listener_name" field.</summary>
    public const int ListenerNameFieldNumber = 2;
    private string listenerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListenerName {
      get { return listenerName_; }
      set {
        listenerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::GrpcFiscalPrint.Subscription.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcFiscalPrint.Subscription.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrinterName != other.PrinterName) return false;
      if (ListenerName != other.ListenerName) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrinterName.Length != 0) hash ^= PrinterName.GetHashCode();
      if (ListenerName.Length != 0) hash ^= ListenerName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrinterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PrinterName);
      }
      if (ListenerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ListenerName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrinterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrinterName);
      }
      if (ListenerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListenerName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subscription other) {
      if (other == null) {
        return;
      }
      if (other.PrinterName.Length != 0) {
        PrinterName = other.PrinterName;
      }
      if (other.ListenerName.Length != 0) {
        ListenerName = other.ListenerName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PrinterName = input.ReadString();
            break;
          }
          case 18: {
            ListenerName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::GrpcFiscalPrint.Subscription.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Subscription message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("PRINTER")] Printer = 0,
        [pbr::OriginalName("SENDER")] Sender = 1,
        [pbr::OriginalName("LISTENER")] Listener = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Data for send from server
  /// </summary>
  public sealed partial class PrinterResponse : pb::IMessage<PrinterResponse> {
    private static readonly pb::MessageParser<PrinterResponse> _parser = new pb::MessageParser<PrinterResponse>(() => new PrinterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrinterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcFiscalPrint.FiscalprintReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterResponse(PrinterResponse other) : this() {
      documentUuid_ = other.documentUuid_;
      result_ = other.result_;
      isError_ = other.isError_;
      printerName_ = other.printerName_;
      lastInvoiceNo_ = other.lastInvoiceNo_;
      lastCreditMemoNo_ = other.lastCreditMemoNo_;
      fiscalPrinterNo_ = other.fiscalPrinterNo_;
      printDate_ = other.printDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrinterResponse Clone() {
      return new PrinterResponse(this);
    }

    /// <summary>Field number for the "document_uuid" field.</summary>
    public const int DocumentUuidFieldNumber = 1;
    private string documentUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocumentUuid {
      get { return documentUuid_; }
      set {
        documentUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 3;
    private bool isError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "printer_name" field.</summary>
    public const int PrinterNameFieldNumber = 4;
    private string printerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrinterName {
      get { return printerName_; }
      set {
        printerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_invoice_no" field.</summary>
    public const int LastInvoiceNoFieldNumber = 5;
    private string lastInvoiceNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastInvoiceNo {
      get { return lastInvoiceNo_; }
      set {
        lastInvoiceNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_credit_memo_no" field.</summary>
    public const int LastCreditMemoNoFieldNumber = 6;
    private string lastCreditMemoNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastCreditMemoNo {
      get { return lastCreditMemoNo_; }
      set {
        lastCreditMemoNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fiscal_printer_no" field.</summary>
    public const int FiscalPrinterNoFieldNumber = 7;
    private string fiscalPrinterNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FiscalPrinterNo {
      get { return fiscalPrinterNo_; }
      set {
        fiscalPrinterNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "print_date" field.</summary>
    public const int PrintDateFieldNumber = 8;
    private long printDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PrintDate {
      get { return printDate_; }
      set {
        printDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrinterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrinterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocumentUuid != other.DocumentUuid) return false;
      if (Result != other.Result) return false;
      if (IsError != other.IsError) return false;
      if (PrinterName != other.PrinterName) return false;
      if (LastInvoiceNo != other.LastInvoiceNo) return false;
      if (LastCreditMemoNo != other.LastCreditMemoNo) return false;
      if (FiscalPrinterNo != other.FiscalPrinterNo) return false;
      if (PrintDate != other.PrintDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocumentUuid.Length != 0) hash ^= DocumentUuid.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      if (PrinterName.Length != 0) hash ^= PrinterName.GetHashCode();
      if (LastInvoiceNo.Length != 0) hash ^= LastInvoiceNo.GetHashCode();
      if (LastCreditMemoNo.Length != 0) hash ^= LastCreditMemoNo.GetHashCode();
      if (FiscalPrinterNo.Length != 0) hash ^= FiscalPrinterNo.GetHashCode();
      if (PrintDate != 0L) hash ^= PrintDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocumentUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocumentUuid);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Result);
      }
      if (IsError != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsError);
      }
      if (PrinterName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrinterName);
      }
      if (LastInvoiceNo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastInvoiceNo);
      }
      if (LastCreditMemoNo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LastCreditMemoNo);
      }
      if (FiscalPrinterNo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FiscalPrinterNo);
      }
      if (PrintDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(PrintDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocumentUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocumentUuid);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      if (PrinterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrinterName);
      }
      if (LastInvoiceNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastInvoiceNo);
      }
      if (LastCreditMemoNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastCreditMemoNo);
      }
      if (FiscalPrinterNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FiscalPrinterNo);
      }
      if (PrintDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PrintDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrinterResponse other) {
      if (other == null) {
        return;
      }
      if (other.DocumentUuid.Length != 0) {
        DocumentUuid = other.DocumentUuid;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      if (other.PrinterName.Length != 0) {
        PrinterName = other.PrinterName;
      }
      if (other.LastInvoiceNo.Length != 0) {
        LastInvoiceNo = other.LastInvoiceNo;
      }
      if (other.LastCreditMemoNo.Length != 0) {
        LastCreditMemoNo = other.LastCreditMemoNo;
      }
      if (other.FiscalPrinterNo.Length != 0) {
        FiscalPrinterNo = other.FiscalPrinterNo;
      }
      if (other.PrintDate != 0L) {
        PrintDate = other.PrintDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DocumentUuid = input.ReadString();
            break;
          }
          case 18: {
            Result = input.ReadString();
            break;
          }
          case 24: {
            IsError = input.ReadBool();
            break;
          }
          case 34: {
            PrinterName = input.ReadString();
            break;
          }
          case 42: {
            LastInvoiceNo = input.ReadString();
            break;
          }
          case 50: {
            LastCreditMemoNo = input.ReadString();
            break;
          }
          case 58: {
            FiscalPrinterNo = input.ReadString();
            break;
          }
          case 64: {
            PrintDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
