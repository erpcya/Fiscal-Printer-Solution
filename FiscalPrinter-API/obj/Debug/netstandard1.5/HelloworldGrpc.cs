// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/helloworld.proto
// </auto-generated>
// Original file comments:
// ***********************************************************************************
// Copyright (C) 2012-2018 E.R.P. Consultores y Asociados, C.A.                     *
// Contributor(s): Yamel Senih ysenih@erpya.com                                     *
// This program is free software: you can redistribute it and/or modify             *
// it under the terms of the GNU General Public License as published by             *
// the Free Software Foundation, either version 2 of the License, or                *
// (at your option) any later version.                                              *
// This program is distributed in the hope that it will be useful,                  *
// but WITHOUT ANY WARRANTY; without even the implied warranty of                   *
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the                     *
// GNU General Public License for more details.                                     *
// You should have received a copy of the GNU General Public License                *
// along with this program.	If not, see <https://www.gnu.org/licenses/>.            *
// **********************************************************************************
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Helloworld {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class FiscalPrintService
  {
    static readonly string __ServiceName = "helloworld.FiscalPrintService";

    static readonly grpc::Marshaller<global::Helloworld.Subscription> __Marshaller_helloworld_Subscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.Subscription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.Document> __Marshaller_helloworld_Document = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.Document.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.PrinterResponse> __Marshaller_helloworld_PrinterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.PrinterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.ResponseStatus> __Marshaller_helloworld_ResponseStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.ResponseStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.ServerStatusRequest> __Marshaller_helloworld_ServerStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.ServerStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.ServerStatus> __Marshaller_helloworld_ServerStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.ServerStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.PrinterStatusRequest> __Marshaller_helloworld_PrinterStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.PrinterStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.PrinterStatus> __Marshaller_helloworld_PrinterStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.PrinterStatus.Parser.ParseFrom);

    static readonly grpc::Method<global::Helloworld.Subscription, global::Helloworld.Document> __Method_subscribePrinter = new grpc::Method<global::Helloworld.Subscription, global::Helloworld.Document>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribePrinter",
        __Marshaller_helloworld_Subscription,
        __Marshaller_helloworld_Document);

    static readonly grpc::Method<global::Helloworld.Subscription, global::Helloworld.PrinterResponse> __Method_subscribeSender = new grpc::Method<global::Helloworld.Subscription, global::Helloworld.PrinterResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribeSender",
        __Marshaller_helloworld_Subscription,
        __Marshaller_helloworld_PrinterResponse);

    static readonly grpc::Method<global::Helloworld.Subscription, global::Helloworld.PrinterResponse> __Method_subscribeListener = new grpc::Method<global::Helloworld.Subscription, global::Helloworld.PrinterResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribeListener",
        __Marshaller_helloworld_Subscription,
        __Marshaller_helloworld_PrinterResponse);

    static readonly grpc::Method<global::Helloworld.Document, global::Helloworld.ResponseStatus> __Method_printDocument = new grpc::Method<global::Helloworld.Document, global::Helloworld.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "printDocument",
        __Marshaller_helloworld_Document,
        __Marshaller_helloworld_ResponseStatus);

    static readonly grpc::Method<global::Helloworld.PrinterResponse, global::Helloworld.ResponseStatus> __Method_sendPrintResponse = new grpc::Method<global::Helloworld.PrinterResponse, global::Helloworld.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "sendPrintResponse",
        __Marshaller_helloworld_PrinterResponse,
        __Marshaller_helloworld_ResponseStatus);

    static readonly grpc::Method<global::Helloworld.ServerStatusRequest, global::Helloworld.ServerStatus> __Method_getServerStatus = new grpc::Method<global::Helloworld.ServerStatusRequest, global::Helloworld.ServerStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getServerStatus",
        __Marshaller_helloworld_ServerStatusRequest,
        __Marshaller_helloworld_ServerStatus);

    static readonly grpc::Method<global::Helloworld.PrinterStatusRequest, global::Helloworld.PrinterStatus> __Method_getPrinterStatus = new grpc::Method<global::Helloworld.PrinterStatusRequest, global::Helloworld.PrinterStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getPrinterStatus",
        __Marshaller_helloworld_PrinterStatusRequest,
        __Marshaller_helloworld_PrinterStatus);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Helloworld.HelloworldReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FiscalPrintService</summary>
    [grpc::BindServiceMethod(typeof(FiscalPrintService), "BindService")]
    public abstract partial class FiscalPrintServiceBase
    {
      /// <summary>
      /// Subscribe Printer
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task subscribePrinter(global::Helloworld.Subscription request, grpc::IServerStreamWriter<global::Helloworld.Document> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe Sender
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task subscribeSender(global::Helloworld.Subscription request, grpc::IServerStreamWriter<global::Helloworld.PrinterResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribe Listener
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task subscribeListener(global::Helloworld.Subscription request, grpc::IServerStreamWriter<global::Helloworld.PrinterResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Print a Document
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.ResponseStatus> printDocument(global::Helloworld.Document request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Response from Printer
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.ResponseStatus> sendPrintResponse(global::Helloworld.PrinterResponse request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///	Handle Monitor
      /// Response from Printer Server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.ServerStatus> getServerStatus(global::Helloworld.ServerStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///	Response for printers detail
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.PrinterStatus> getPrinterStatus(global::Helloworld.PrinterStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FiscalPrintService</summary>
    public partial class FiscalPrintServiceClient : grpc::ClientBase<FiscalPrintServiceClient>
    {
      /// <summary>Creates a new client for FiscalPrintService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FiscalPrintServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FiscalPrintService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FiscalPrintServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FiscalPrintServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FiscalPrintServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Subscribe Printer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Helloworld.Document> subscribePrinter(global::Helloworld.Subscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribePrinter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe Printer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Helloworld.Document> subscribePrinter(global::Helloworld.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribePrinter, null, options, request);
      }
      /// <summary>
      /// Subscribe Sender
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Helloworld.PrinterResponse> subscribeSender(global::Helloworld.Subscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribeSender(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe Sender
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Helloworld.PrinterResponse> subscribeSender(global::Helloworld.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeSender, null, options, request);
      }
      /// <summary>
      /// Subscribe Listener
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Helloworld.PrinterResponse> subscribeListener(global::Helloworld.Subscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribeListener(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe Listener
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Helloworld.PrinterResponse> subscribeListener(global::Helloworld.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeListener, null, options, request);
      }
      /// <summary>
      /// Print a Document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.ResponseStatus printDocument(global::Helloworld.Document request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return printDocument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Print a Document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.ResponseStatus printDocument(global::Helloworld.Document request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_printDocument, null, options, request);
      }
      /// <summary>
      /// Print a Document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.ResponseStatus> printDocumentAsync(global::Helloworld.Document request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return printDocumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Print a Document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.ResponseStatus> printDocumentAsync(global::Helloworld.Document request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_printDocument, null, options, request);
      }
      /// <summary>
      /// Response from Printer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.ResponseStatus sendPrintResponse(global::Helloworld.PrinterResponse request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendPrintResponse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Response from Printer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.ResponseStatus sendPrintResponse(global::Helloworld.PrinterResponse request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendPrintResponse, null, options, request);
      }
      /// <summary>
      /// Response from Printer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.ResponseStatus> sendPrintResponseAsync(global::Helloworld.PrinterResponse request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendPrintResponseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Response from Printer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.ResponseStatus> sendPrintResponseAsync(global::Helloworld.PrinterResponse request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendPrintResponse, null, options, request);
      }
      /// <summary>
      ///	Handle Monitor
      /// Response from Printer Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.ServerStatus getServerStatus(global::Helloworld.ServerStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getServerStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///	Handle Monitor
      /// Response from Printer Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.ServerStatus getServerStatus(global::Helloworld.ServerStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getServerStatus, null, options, request);
      }
      /// <summary>
      ///	Handle Monitor
      /// Response from Printer Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.ServerStatus> getServerStatusAsync(global::Helloworld.ServerStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getServerStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///	Handle Monitor
      /// Response from Printer Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.ServerStatus> getServerStatusAsync(global::Helloworld.ServerStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getServerStatus, null, options, request);
      }
      /// <summary>
      ///	Response for printers detail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.PrinterStatus getPrinterStatus(global::Helloworld.PrinterStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPrinterStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///	Response for printers detail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.PrinterStatus getPrinterStatus(global::Helloworld.PrinterStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getPrinterStatus, null, options, request);
      }
      /// <summary>
      ///	Response for printers detail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PrinterStatus> getPrinterStatusAsync(global::Helloworld.PrinterStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPrinterStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///	Response for printers detail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PrinterStatus> getPrinterStatusAsync(global::Helloworld.PrinterStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getPrinterStatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FiscalPrintServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FiscalPrintServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FiscalPrintServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_subscribePrinter, serviceImpl.subscribePrinter)
          .AddMethod(__Method_subscribeSender, serviceImpl.subscribeSender)
          .AddMethod(__Method_subscribeListener, serviceImpl.subscribeListener)
          .AddMethod(__Method_printDocument, serviceImpl.printDocument)
          .AddMethod(__Method_sendPrintResponse, serviceImpl.sendPrintResponse)
          .AddMethod(__Method_getServerStatus, serviceImpl.getServerStatus)
          .AddMethod(__Method_getPrinterStatus, serviceImpl.getPrinterStatus).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FiscalPrintServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_subscribePrinter, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Helloworld.Subscription, global::Helloworld.Document>(serviceImpl.subscribePrinter));
      serviceBinder.AddMethod(__Method_subscribeSender, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Helloworld.Subscription, global::Helloworld.PrinterResponse>(serviceImpl.subscribeSender));
      serviceBinder.AddMethod(__Method_subscribeListener, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Helloworld.Subscription, global::Helloworld.PrinterResponse>(serviceImpl.subscribeListener));
      serviceBinder.AddMethod(__Method_printDocument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.Document, global::Helloworld.ResponseStatus>(serviceImpl.printDocument));
      serviceBinder.AddMethod(__Method_sendPrintResponse, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.PrinterResponse, global::Helloworld.ResponseStatus>(serviceImpl.sendPrintResponse));
      serviceBinder.AddMethod(__Method_getServerStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.ServerStatusRequest, global::Helloworld.ServerStatus>(serviceImpl.getServerStatus));
      serviceBinder.AddMethod(__Method_getPrinterStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.PrinterStatusRequest, global::Helloworld.PrinterStatus>(serviceImpl.getPrinterStatus));
    }

  }
}
#endregion
